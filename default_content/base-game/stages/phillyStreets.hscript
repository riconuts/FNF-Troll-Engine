import flixel.addons.display.FlxTiledSprite;
import openfl.filters.ShaderFilter;

var scrollingSky:FlxTiledSprite;

var rainShaderStartIntensity:Float = 0.2;
var rainShaderEndIntensity:Float = 0.4;
var rainShader = newShader("rain", "rain");


var lightsStop:Bool = false; // state of the traffic lights
var lastChange:Int = 0;
var changeInterval:Int = 8; // make sure it doesnt change until AT LEAST this many beats

var carWaiting:Bool = false; // if the car is waiting at the lights and is ready to go on green
var carInterruptable:Bool = true; // if the car can be reset
var car2Interruptable:Bool = true;

function getNamedProp(n)return this.props.get(n);


function changeLights(beat:Int):Void{

	lastChange = beat;
	lightsStop = !lightsStop;

	if(lightsStop){
		getNamedProp('phillyTraffic').animation.play('tored');
		changeInterval = 20;
	} else {
		getNamedProp('phillyTraffic').animation.play('togreen');
		changeInterval = 30;

		if(carWaiting == true) finishCarLights(getNamedProp('phillyCars'));
	}
	trace("cock");

}

function resetCar(left:Bool, right:Bool){
	if(left){
		carWaiting = false;
		carInterruptable = true;
		var cars = getNamedProp('phillyCars');
		if (cars != null) {
			FlxTween.cancelTweensOf(cars);
			cars.x = 1200;
			cars.y = 818;
			cars.angle = 0;
		}
	}

	if(right){
		car2Interruptable = true;
		var cars2 = getNamedProp('phillyCars2');
		if (cars2 != null) {
			FlxTween.cancelTweensOf(cars2);
			getNamedProp('phillyCars2').x = 1200;
			getNamedProp('phillyCars2').y = 818;
			getNamedProp('phillyCars2').angle = 0;
		}
	}
}

function onLoad(s, fg){
	game.gf.scrollFactor.set(1, 1);

	scrollingSky = new FlxTiledSprite(Paths.image('stages/phillyStreets/phillySkybox'), 2922, 718, true, false);
	scrollingSky.setPosition(-650, -375);
	scrollingSky.scrollFactor.set(0.1, 0.1);
	scrollingSky.scale.set(0.65, 0.65);
	s.insert(0, scrollingSky);

	for (id in this.props.keys()) {
		if (StringTools.endsWith(id, "_lightmap")) {
			this.props.get(id).blend = 0; // ADD
		}
	}

	switch(game.songId){
		case 'darnell':
			rainShaderStartIntensity = 0;
			rainShaderEndIntensity = 0.1;
		case 'lit-up':
			rainShaderStartIntensity = 0.1;
			rainShaderEndIntensity = 0.2;
		case '2hot':
			rainShaderStartIntensity = 0.2;
			rainShaderEndIntensity = 0.4;
	}
	
	rainShader.data.uScale.value = [FlxG.height / 200.0];
	rainShader.data.uIntensity.value = [rainShaderStartIntensity];
	rainShader.data.uTime.value = [0];
    rainShader.data.uScreenResolution.value = [FlxG.width, FlxG.height];
    rainShader.data.uCameraBounds.value = [0, 0, FlxG.width, FlxG.height];
    rainShader.data.uFrameBounds.value = [0, 0, FlxG.width, FlxG.height];
	var color = FlxColor.fromString("#FF6680cc");
	rainShader.setFloatArray("uRainColor", [color.red / 255, color.green / 255, color.blue / 255]);

	game.camGame.setFilters([new ShaderFilter(rainShader)]);

	resetCar(true, true);
}

function finishCarLights(sprite:FlxSprite):Void{
	carWaiting = false;
	var duration:Float = FlxG.random.float(1.8, 3);
	var rotations:Array<Int> = [-5, 18];
	var offset:Array<Float> = [306.6, 168.3];
	var startdelay:Float = FlxG.random.float(0.2, 1.2);

	var path:Array<FlxPoint> = [
		FlxPoint.get(1950 - offset[0] - 80, 980 - offset[1] + 15),
		FlxPoint.get(2400 - offset[0], 980 - offset[1] - 50),
		FlxPoint.get(3102 - offset[0], 1127 - offset[1] + 40)
	];

	FlxTween.angle(sprite, rotations[0], rotations[1], duration, {ease: FlxEase.sineIn, startDelay: startdelay} );
	FlxTween.quadPath(sprite, path, duration, true,
{
  ease: FlxEase.sineIn,
		startDelay: startdelay,
		onComplete: function(_) {
		carInterruptable = true;
  }
});
}

/**
* Drives a car towards the lights and stops.
* Used when a car tries to drive while the lights are red.
*/
function driveCarLights(sprite:FlxSprite):Void{
	carInterruptable = false;
	FlxTween.cancelTweensOf(sprite);
	var variant:Int = FlxG.random.int(1,4);
	sprite.animation.play('car' + variant);
	var extraOffset = [0, 0];
	var duration:Float = 2;

	switch(variant){
		case 1:
			duration = FlxG.random.float(1, 1.7);
		case 2:
			extraOffset = [20, -15];
			duration = FlxG.random.float(0.9, 1.5);
		case 3:
			extraOffset = [30, 50];
			duration = FlxG.random.float(1.5, 2.5);
		case 4:
			extraOffset = [10, 60];
			duration = FlxG.random.float(1.5, 2.5);
	}
	var rotations:Array<Int> = [-7, -5];
	var offset:Array<Float> = [306.6, 168.3];
	sprite.offset.set(extraOffset[0], extraOffset[1]);

	var path:Array<FlxPoint> = [
		FlxPoint.get(1500 - offset[0] - 20, 1049 - offset[1] - 20),
		FlxPoint.get(1770 - offset[0] - 80, 994 - offset[1] + 10),
		FlxPoint.get(1950 - offset[0] - 80, 980 - offset[1] + 15)
	];
	// debug shit!!! keeping it here just in case
	// for(point in path){
	// 	var debug:FlxSprite = new FlxSprite(point.x - 5, point.y - 5).makeGraphic(10, 10, 0xFFFF0000);
// 	add(debug);
	// }
	FlxTween.angle(sprite, rotations[0], rotations[1], duration, {ease: FlxEase.cubeOut} );
	FlxTween.quadPath(sprite, path, duration, true,
{
  ease: FlxEase.cubeOut,
		onComplete: function(_) {
		carWaiting = true;
					if(lightsStop == false) finishCarLights(getNamedProp('phillyCars'));
  }
});
}

/**
* Drives a car across the screen without stopping.
* Used when the lights are green.
*/
function driveCar(sprite:FlxSprite):Void{
	carInterruptable = false;
	FlxTween.cancelTweensOf(sprite);
	var variant:Int = FlxG.random.int(1,4);
	sprite.animation.play('car' + variant);
	// setting an offset here because the current implementation of stage prop offsets was not working at all for me
	// if possible id love to not have to do this but im keeping this for now
	var extraOffset = [0, 0];
	var duration:Float = 2;
	// set different values of speed for the car types (and the offset)
	switch(variant){
		case 1:
			duration = FlxG.random.float(1, 1.7);
		case 2:
			extraOffset = [20, -15];
			duration = FlxG.random.float(0.6, 1.2);
		case 3:
			extraOffset = [30, 50];
			duration = FlxG.random.float(1.5, 2.5);
		case 4:
			extraOffset = [10, 60];
			duration = FlxG.random.float(1.5, 2.5);
	}
	// random arbitrary values for getting the cars in place
	// could just add them to the points but im LAZY!!!!!!
	var offset:Array<Float> = [306.6, 168.3];
	sprite.offset.set(extraOffset[0], extraOffset[1]);
	// start/end rotation
	var rotations:Array<Int> = [-8, 18];
	// the path to move the car on
	var path:Array<FlxPoint> = [
			FlxPoint.get(1570 - offset[0], 1049 - offset[1] - 30),
			FlxPoint.get(2400 - offset[0], 980 - offset[1] - 50),
			FlxPoint.get(3102 - offset[0], 1127 - offset[1] + 40)
	];

	FlxTween.angle(sprite, rotations[0], rotations[1], duration, null );
	FlxTween.quadPath(sprite, path, duration, true,
  {
	ease: null,
			onComplete: function(_) {
		carInterruptable = true;
	  }
});
}

function driveCarBack(sprite:FlxSprite):Void{
	car2Interruptable = false;
	FlxTween.cancelTweensOf(sprite);
	var variant:Int = FlxG.random.int(1,4);
	sprite.animation.play('car' + variant);
	// setting an offset here because the current implementation of stage prop offsets was not working at all for me
	// if possible id love to not have to do this but im keeping this for now
	var extraOffset = [0, 0];
	var duration:Float = 2;
	// set different values of speed for the car types (and the offset)
	switch(variant){
		case 1:
			duration = FlxG.random.float(1, 1.7);
		case 2:
			extraOffset = [20, -15];
			duration = FlxG.random.float(0.6, 1.2);
		case 3:
			extraOffset = [30, 50];
			duration = FlxG.random.float(1.5, 2.5);
		case 4:
			extraOffset = [10, 60];
			duration = FlxG.random.float(1.5, 2.5);
	}
	// random arbitrary values for getting the cars in place
	// could just add them to the points but im LAZY!!!!!!
	var offset:Array<Float> = [306.6, 168.3];
	sprite.offset.set(extraOffset[0], extraOffset[1]);
	// start/end rotation
	var rotations:Array<Int> = [18, -8];
	// the path to move the car on
	var path:Array<FlxPoint> = [
			FlxPoint.get(3102 - offset[0], 1127 - offset[1] + 60),
			FlxPoint.get(2400 - offset[0], 980 - offset[1] - 30),
			FlxPoint.get(1570 - offset[0], 1049 - offset[1] - 10)

	];

	FlxTween.angle(sprite, rotations[0], rotations[1], duration, null );
	FlxTween.quadPath(sprite, path, duration, true,
  {
	ease: null,
			onComplete: function(_) {
		car2Interruptable = true;
	  }
});
}

function onUpdate(e){
	if(scrollingSky != null) scrollingSky.scrollX -= e * 22;

	var remappedIntensityValue:Float = FlxMath.remapToRange(Conductor.songPosition, 0, game.inst != null ? game.inst.length : 0.0, rainShaderStartIntensity, rainShaderEndIntensity);
	rainShader.data.uIntensity.value[0] = remappedIntensityValue;

    rainShader.data.uScreenResolution.value = [FlxG.width, FlxG.height];
    rainShader.data.uCameraBounds.value = [game.camGame.viewLeft, game.camGame.viewTop, game.camGame.viewRight, game.camGame.viewBottom];
	rainShader.data.uTime.value[0] += e;
}

function onBeatHit(){
	if (FlxG.random.bool(10) && game.curBeat != (lastChange + changeInterval) && carInterruptable == true)
		{
			if(lightsStop == false){
				driveCar(getNamedProp('phillyCars'));
			}else{
				driveCarLights(getNamedProp('phillyCars'));
			}
		}

		// try driving one on the right too. in this case theres no red light logic, it just can only spawn on green lights
		if(FlxG.random.bool(10) && game.curBeat != (lastChange + changeInterval) && car2Interruptable == true && lightsStop == false) driveCarBack(getNamedProp('phillyCars2'));

		// After the interval has been hit, change the light state.
		if (game.curBeat == (lastChange + changeInterval)) changeLights(game.curBeat);
}
function pauseTween(tween:FlxTween):Void
	{
	  if (tween != null)
	  {
		tween.active = false;
	  }
	}
  
	function resumeTween(tween:FlxTween):Void
	{
	  if (tween != null)
	  {
		tween.active = true;
	  }
	}

function onPause():Void {
	var cars = getNamedProp('phillyCars');
	if (cars != null) {
		FlxTween.globalManager.forEachTweensOf(cars, null, pauseTween);
	}

	var cars2 = getNamedProp('phillyCars2');
	if (cars2 != null) {
		FlxTween.globalManager.forEachTweensOf(cars2, null, pauseTween);
	}
}

function onResume():Void {
	var cars = getNamedProp('phillyCars');
	if (cars != null) {
		FlxTween.globalManager.forEachTweensOf(cars, null, resumeTween);
	}

	var cars2 = getNamedProp('phillyCars2');
	if (cars2 != null) {
		FlxTween.globalManager.forEachTweensOf(cars2, null, resumeTween);
	}
}

